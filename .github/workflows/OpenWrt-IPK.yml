name: 单独编译OpenWrt IPK

# 触发条件：手动触发、推送到main分支、PR到main分支
on:
  workflow_dispatch:  # 支持手动触发（在GitHub页面点击运行）
  push:
    branches: [ main ]
    paths:
      - 'package/**'  # 仅当package目录有变动时触发（可选）
  pull_request:
    branches: [ main ]

jobs:
  build-ipk:
    name: 编译IPK包
    runs-on: ubuntu-latest  # 使用Ubuntu环境（OpenWrt编译推荐）
    env:
      # 配置参数（根据你的需求修改）
      SDK_URL: "https://mirrors.tuna.tsinghua.edu.cn/openwrt/releases/24.10.3/targets/ramips/mt7620/openwrt-sdk-24.10.3-ramips-mt7620_gcc-13.3.0_musl.Linux-x86_64.tar.zst"  # OpenWrt SDK下载地址
      TARGET_PACKAGE: "luci-theme-vzant"  # 要编译的包名（如luci-app-ssr-plus）
      SDK_DIR: "openwrt-sdk"  # SDK解压后的目录名

    steps:
      - name: 检查代码仓库
        uses: actions/checkout@v4  # 拉取当前仓库代码（如果你的包在仓库中）

      - name: 安装系统依赖
        run: |
          sudo apt update -y
          # 安装OpenWrt编译所需的基础工具
          sudo apt install -y \
            build-essential libncurses5-dev libncursesw5-dev \
            zlib1g-dev gawk git gettext libssl-dev xsltproc \
            wget unzip xz-utils flex bison python3

      - name: 下载并解压OpenWrt SDK
        run: |
          # 下载SDK
          # wget -O openwrt-sdk.tar.xz $SDK_URL  # 下载OpenWrt SDK
          # 解压SDK
          # tar -xvf *.tar.xz  # 自动匹配xz和tar文件 解压OpenWrt SDK
          # 重命名SDK目录（方便后续操作）
          # mv -f openwrt-sdk-* $SDK_DIR && rm -rf *.tar  # 重命名SDK目录为 openwrt-sdk并删除解压tar文件
          # 1. 测试链接有效性
          if ! wget --spider $SDK_URL 2>/dev/null; then
            echo "错误：SDK URL无效，请检查 $SDK_URL"
            exit 1
          fi
      
          # 2. 下载文件（支持断点续传）
          wget -c $SDK_URL -O sdk.tar.xz
      
          # 3. 解压（验证通过后再执行）
          tar -xvf *.tar.xz  # 自动匹配xz和tar文件 解压OpenWrt SDK
          mv openwrt-sdk-* $SDK_DIR

      - name: 配置SDK并添加自定义包（可选）
        run: |
          cd $SDK_DIR
          # 更新feeds（OpenWrt包索引）
          # 更新与安装全部 如果只单独编译一个指定的包就不要动
          # ./scripts/feeds update -a
          # ./scripts/feeds install -a
          
          # 只更新必要的feeds（如luci、packages）
          ./scripts/feeds update luci packages

          # （可选）如果你的包在当前仓库，将其复制到SDK的package目录
          # 复制自定义包到SDK
          # GITHUB_WORKSPACE是仓库根目录的绝对路径
          # 假设SDK的package目录是 $SDK_DIR/package
          mkdir package
          cp -r $GITHUB_WORKSPACE/${TARGET_PACKAGE} $SDK_DIR/package/
          
          # 只安装目标包或自定义包（会自动安装依赖） install后面可以替换成自己需要的目标包
          ./scripts/feeds install ${TARGET_PACKAGE}

          # （可选）添加自定义feed（如果包在第三方仓库）
          # echo 'src-git custom https://github.com/你的仓库.git' >> feeds.conf.default
          # ./scripts/feeds update custom
          # ./scripts/feeds install ${TARGET_PACKAGE}

      - name: 配置编译选项
        run: |
          cd $SDK_DIR
          # 生成默认配置
          make defconfig
          # 启用目标包的编译（通过.config文件指定）
          echo "CONFIG_PACKAGE_${TARGET_PACKAGE}=y" >> .config
          # 检查配置（可选）
          cat .config | grep ${TARGET_PACKAGE}

      - name: 编译目标IPK包
        run: |
          cd $SDK_DIR
          # 编译指定包（-j$(nproc)启用多线程加速，V=s显示详细日志）
          make package/${TARGET_PACKAGE}/compile V=s -j$(nproc)

      - name: 收集编译产物
        run: |
          # 查找生成的IPK文件（路径因架构/版本略有差异）
          find $SDK_DIR/bin/packages -name "*.ipk" -exec cp {} ./ \;
          # 列出所有IPK（方便确认）
          ls -l *.ipk

      - name: 上传IPK作为Artifact
        uses: actions/upload-artifact@v4
        with:
          name: openwrt-ipk-${{ env.TARGET_PACKAGE }}
          path: "*.ipk"  # 上传当前目录下所有IPK文件
          retention-days: 30  # 产物保留30天

      - name: 缓存下载的源码包
        uses: actions/cache@v3
        with:
          path: ${{ env.SDK_DIR }}/dl
          key: ${{ runner.os }}-dl-${{ hashFiles('**/Makefile') }}
